{"version":3,"sources":["../node_modules/.pnpm/tsup@8.3.5_jiti@1.21.7_postcss@8.4.49_typescript@5.7.2_yaml@2.7.0/node_modules/tsup/assets/cjs_shims.js","../node_modules/.pnpm/openapi-types@12.1.3/node_modules/openapi-types/index.ts","../src/index.ts","../src/adapters/openapi/OpenAPIV2.ts","../src/adapters/openapi/OpenAPIV3.ts","../node_modules/.pnpm/chalk@5.4.1/node_modules/chalk/source/index.js","../node_modules/.pnpm/chalk@5.4.1/node_modules/chalk/source/vendor/ansi-styles/index.js","../node_modules/.pnpm/chalk@5.4.1/node_modules/chalk/source/vendor/supports-color/index.js","../node_modules/.pnpm/chalk@5.4.1/node_modules/chalk/source/utilities.js","../src/types/openapi.ts","../src/types/type.ts","../src/utils/format2type.ts","../src/utils/formatCode.ts","../src/utils/isSameEnum.ts","../src/utils/normalizeName.ts","../src/utils/pathToName.ts","../src/utils/reference2name.ts","../src/utils/writetoFile.ts","../src/adapters/openapi/OpenAPIV3_1.ts","../src/client/AxiosClient.ts","../src/generators/Generator.ts","../src/client/FetchClient.ts","../src/types/client.ts","../src/utils/getApiDoc.ts"],"names":["OpenAPIV3","HttpMethods","OpenAPIV2","process","os","tty","styles","chalk","supportsColor","prettier","text","nodefs","format","schema","acc","import_openapi_types","logger","Agent","setGlobalDispatcher"],"mappings":"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","file":"index.cjs","sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n",null,"import { OpenAPI, OpenAPIV3, OpenAPIV3_1 } from \"openapi-types\";\n\nimport OpenApiV2 from \"@/adapters/openapi/OpenAPIV2\";\nimport OpenApiV3 from \"@/adapters/openapi/OpenAPIV3\";\nimport OpenApiV3_1 from \"@/adapters/openapi/OpenAPIV3_1\";\nimport AxiosClient from \"@/client/AxiosClient\";\nimport FetchClient from \"@/client/FetchClient\";\nimport { ClientTypes } from \"@/types/client\";\nimport { OpenApiVersion } from \"@/types/openapi\";\nimport getApiDoc, { getOpenApiDocVersion } from \"@/utils/getApiDoc\";\n\nexport interface ClientGenOptions {\n  doc: string;\n  baseURL?: string;\n  client?: ClientTypes;\n  ouput?: string;\n}\n\nexport const codeGenByConfig = async (doc: OpenAPI.Document, output: string) => {\n  const version = getOpenApiDocVersion(doc);\n  const client = new FetchClient();\n  switch (version) {\n    case OpenApiVersion.v2:\n      await new OpenApiV2().parse();\n      break;\n    case OpenApiVersion.v3:\n      await new OpenApiV3(doc as OpenAPIV3.Document, client, output).parse();\n      break;\n    case OpenApiVersion.v3_1:\n      await new OpenApiV3_1(doc as OpenAPIV3_1.Document, client, output).parse();\n      break;\n    default:\n      break;\n  }\n};\n\nexport default async function codeGen(options: ClientGenOptions, output: string) {\n  if (!options.doc) {\n    console.error(`Missing openapi doc url`);\n    process.exit(1);\n  }\n\n  const doc = await getApiDoc(options.doc);\n  const version = getOpenApiDocVersion(doc);\n\n  const client = (() => {\n    switch (options.client) {\n      case ClientTypes.Axios:\n        return new AxiosClient();\n      default:\n        return new FetchClient();\n    }\n  })();\n\n  switch (version) {\n    case OpenApiVersion.v2:\n      await new OpenApiV2().parse();\n      break;\n    case OpenApiVersion.v3:\n      await new OpenApiV3(doc as OpenAPIV3.Document, client, output).parse();\n      break;\n    case OpenApiVersion.v3_1:\n      await new OpenApiV3_1(doc as OpenAPIV3_1.Document, client, output).parse();\n      break;\n    default:\n      break;\n  }\n}\n","import Adaptor from \"@/providers/Adaptor\";\n\nexport default class OpenApiV2 implements Adaptor {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async parse() {\n    return \"\";\n  }\n}\n","/* eslint-disable unicorn/filename-case */\n/**\n * OpenAPI v3 Schema Parser and Code Generator\n * Converts OpenAPI v3 specifications to TypeScript code\n */\n\nimport { createScopedLogger } from \"@moccona/logger\";\nimport { OpenAPIV3 } from \"openapi-types\";\n\nimport Adaptor from \"@/providers/Adaptor\";\nimport Client from \"@/providers/Client\";\nimport { ClientInfo } from \"@/types/client\";\nimport { isV3ArrySchemaObject, isV3ReferenceObject } from \"@/types/openapi\";\nimport type { MaybeTagItem } from \"@/types/tag\";\nimport {\n  ArrayType,\n  Enum,\n  IntersectionType,\n  intersectionType,\n  PropertySignature,\n  TypeAlias,\n  UnionType,\n  unionType,\n} from \"@/types/type\";\n// Utilities\nimport format2type from \"@/utils/format2type\";\nimport { formatCode } from \"@/utils/formatCode\";\nimport isSameEnum from \"@/utils/isSameEnum\";\nimport normalizeName from \"@/utils/normalizeName\";\nimport pathToName, { capitalize, upperCamelCase } from \"@/utils/pathToName\";\nimport reference2name from \"@/utils/reference2name\";\nimport { writeToFile } from \"@/utils/writetoFile\";\n\nconst logger = createScopedLogger(\"OpenAPIV3\");\n\n/**\n * OpenApiV3 Class\n * Implements the Adaptor interface for OpenAPI v3 schema parsing\n */\nexport default class OpenApiV3 implements Adaptor {\n  /** Store for enum definitions generated during parsing */\n  protected enums: Record<string, Enum> = {};\n\n  /** Client instance for code generation */\n  private client: Client;\n\n  /**\n   * Returns the banner comment for generated code\n   * Including version, title and description from OpenAPI doc\n   */\n  public get banner() {\n    const { info } = this.doc;\n    const { version, title, description } = info;\n\n    return this.client.comment([\n      {\n        comment: version,\n      },\n      { comment: title },\n      { comment: description ?? \"\" },\n    ]);\n  }\n\n  public get schemas() {\n    const { components } = this.doc;\n    if (components) {\n      const { schemas = {}, requestBodies = {}, responses = {} } = components;\n\n      const schemas_ = schemas as Record<string, OpenAPIV3.SchemaObject>;\n\n      return {\n        ...schemas,\n        ...this.analyzeMediaSchemas(schemas_, requestBodies),\n        ...this.analyzeMediaSchemas(schemas_, responses),\n      } as Record<string, OpenAPIV3.SchemaObject>;\n    }\n\n    return {};\n  }\n\n  public get parameters() {\n    const { components } = this.doc;\n    if (components) {\n      const { parameters = {}, headers = {} } = components;\n\n      return {\n        ...(headers as Record<string, OpenAPIV3.ParameterObject>),\n        ...(parameters as Record<string, OpenAPIV3.ParameterObject>),\n      };\n    }\n\n    return {};\n  }\n\n  protected analyzeMediaSchemas(\n    schemas: Record<string, OpenAPIV3.SchemaObject>,\n    mediaSchemas: Record<string, OpenAPIV3.RequestBodyObject | OpenAPIV3.ResponseObject | OpenAPIV3.ReferenceObject>,\n  ) {\n    const resolveReference = (ref: string) => schemas[reference2name(ref)];\n\n    const otherSchemasWithNoReference = {};\n\n    return Object.entries(mediaSchemas).reduce<Record<string, OpenAPIV3.SchemaObject>>((acc, [key, schema]) => {\n      key = upperCamelCase(normalizeName(key));\n\n      if (isV3ReferenceObject(schema)) {\n        return Object.assign(acc, {\n          [key]: resolveReference(schema.$ref),\n        });\n      }\n\n      const { content } = schema;\n\n      if (!content) {\n        return acc;\n      }\n\n      const mediaTypeSchema = (\n        \"application/json\" in content\n          ? content[\"application/json\"]\n          : \"*/*\" in content\n            ? content[\"*/*\"]\n            : Object.values(content)[0]\n      ).schema;\n\n      if (!mediaTypeSchema) {\n        return acc;\n      }\n\n      if ((mediaTypeSchema as OpenAPIV3.ReferenceObject).$ref) {\n        return Object.assign(acc, {\n          [key]: resolveReference((mediaTypeSchema as OpenAPIV3.ReferenceObject).$ref),\n        });\n      }\n\n      return Object.assign(acc, {\n        [key]: mediaTypeSchema as OpenAPIV3.SchemaObject,\n      });\n    }, otherSchemasWithNoReference);\n  }\n\n  protected expandSchemaObject(\n    schema: OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject,\n    parentName: string,\n  ): ArrayType[\"elementType\"] {\n    if (isV3ReferenceObject(schema)) return upperCamelCase(reference2name(schema.$ref));\n    if (isV3ArrySchemaObject(schema)) {\n      const { items } = schema;\n      if (isV3ReferenceObject(items)) {\n        return {\n          elementType: upperCamelCase(reference2name(items.$ref)),\n        } as ArrayType;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const isEmptyItems = items == undefined || Object.keys(items).length === 0;\n\n      return {\n        elementType: isEmptyItems ? \"unknown\" : this.expandSchemaObject(items, \"\"),\n      } as ArrayType;\n    } else {\n      const { type, format, allOf, oneOf, anyOf, enum: enums_, required, additionalProperties } = schema;\n      const { properties } = schema;\n\n      if (oneOf || anyOf) {\n        return {\n          name: unionType,\n          types: (oneOf ?? anyOf ?? allOf)!.map((s) => this.expandSchemaObject(s, \"\")),\n        } as UnionType;\n      }\n\n      if (allOf) {\n        return {\n          name: intersectionType,\n          types: allOf.map((schema) =>\n            isV3ReferenceObject(schema)\n              ? upperCamelCase(reference2name(schema.$ref))\n              : this.expandSchemaObject(schema, \"\"),\n          ),\n        } as IntersectionType;\n      }\n\n      if (type === \"object\" && !properties) {\n        return {\n          typeName: \"Record\",\n          typeArguments: [\"string\", \"unknown\"],\n        };\n      }\n\n      if (additionalProperties) {\n        const propertiesSchema = isV3ReferenceObject(additionalProperties)\n          ? this.schemas[reference2name(additionalProperties.$ref)]\n          : additionalProperties;\n\n        if (typeof propertiesSchema !== \"boolean\") {\n          return this.expandSchemaObject(propertiesSchema, \"\");\n        }\n      }\n\n      if (properties && Object.keys(properties).length > 0) {\n        return {\n          members: Object.keys(properties).reduce<PropertySignature[]>((acc, propKey) => {\n            const propSchema = properties[propKey];\n\n            if (isV3ReferenceObject(propSchema)) {\n              acc.push({\n                name: propKey,\n                type: upperCamelCase(reference2name(propSchema.$ref)),\n              });\n            } else {\n              if (propSchema.enum) {\n                const name = capitalize(parentName) + capitalize(propKey);\n                const preDefinedSchemaName = this.getEnum(propSchema.enum);\n                if (preDefinedSchemaName) {\n                  acc.push({\n                    name: propKey,\n                    type: name,\n                  });\n                } else {\n                  acc.push({\n                    name: propKey,\n                    type: {\n                      name: unionType,\n                      types:\n                        propSchema.type === \"number\"\n                          ? ([...new Set(propSchema.enum)] as (string | number)[])\n                          : ([...new Set(propSchema.enum)] as (string | number)[]).map((v) => `\"${v}\"`),\n                    } as UnionType,\n                  });\n                }\n              } else {\n                if ((propSchema as OpenAPIV3.ParameterObject).in === \"cookie\") {\n                  acc.push({\n                    in: (propSchema as OpenAPIV3.ParameterObject).in,\n                    deprecated: propSchema.deprecated,\n                    name: propKey,\n                    format: propSchema.format,\n                    required: (propSchema as OpenAPIV3.ParameterObject).required ?? required?.includes(propKey),\n                    type: this.expandSchemaObject(propSchema, propKey),\n                    description: propSchema.description,\n                  } as PropertySignature);\n                }\n              }\n            }\n\n            return acc;\n          }, []),\n        };\n      }\n\n      if (enums_) {\n        return {\n          name: unionType,\n          types: (enums_ as (string | number)[]).map((v) => `\"${v}\"`),\n        } as UnionType;\n      }\n\n      // @ts-expect-error format and type are good.\n      return format ? format2type(format) : format2type(type);\n    }\n  }\n\n  protected expandParameterSchema(\n    parameters: (OpenAPIV3.ReferenceObject | OpenAPIV3.ParameterObject)[],\n  ): PropertySignature[] {\n    const items: PropertySignature[] = [];\n\n    parameters.forEach((parameter) => {\n      parameter = isV3ReferenceObject(parameter) ? this.parameters[reference2name(parameter.$ref)] : parameter;\n      const { name, deprecated, schema, required, in: in_ } = parameter;\n      if (schema) {\n        items.push({\n          name,\n          in: in_,\n          required: !!required,\n          deprecated: !!deprecated,\n          type: this.expandSchemaObject(schema, name),\n        });\n      }\n    });\n\n    return items;\n  }\n\n  private getEnum(enumValue: unknown[]) {\n    const enum_ = Object.values(this.enums).find((value) =>\n      isSameEnum(\n        value.members.map((m) => m.name),\n        enumValue,\n      ),\n    );\n\n    return enum_?.name;\n  }\n\n  protected analyzeApis() {\n    const { paths } = this.doc;\n    if (Object.keys(paths).length === 0) {\n      return [];\n    }\n    const schemas = this.schemas;\n    for (const schemaKey in schemas) {\n      const schema = schemas[schemaKey];\n      if (schema.properties) {\n        for (const propKey in schema.properties) {\n          const prop = schema.properties[propKey];\n          if (!isV3ReferenceObject(prop) && prop.enum) {\n            const name = capitalize(schemaKey) + capitalize(propKey);\n            this.enums[name] = {\n              name,\n              modifier: [\"export\"],\n              members: [...new Set(prop.enum)].map((value: string) => ({ name: value, type: value })),\n            } as Enum;\n          }\n        }\n      }\n    }\n    return Object.entries(paths).reduce<ClientInfo[]>((acc, [path, schema]) => {\n      const apiObjects: ClientInfo[] = [];\n\n      if (schema) {\n        const { parameters: commonParameters = [] } = schema;\n        Object.keys(OpenAPIV3.HttpMethods).forEach((method) => {\n          //@ts-expect-error Make it all lowercase\n          const apiMethodObject = schema[(method as keyof typeof schema).toLowerCase()] as\n            | OpenAPIV3.OperationObject\n            | undefined;\n\n          if (apiMethodObject) {\n            const methodSchema = apiMethodObject;\n            const {\n              summary,\n              description,\n              parameters = [],\n              responses = {},\n              deprecated,\n              requestBody,\n              tags = [],\n              operationId,\n            } = methodSchema;\n\n            commonParameters.forEach((p) => {\n              if (\n                !parameters\n                  .map((s) => (isV3ReferenceObject(s) ? reference2name(s.$ref) : s.name))\n                  .includes(isV3ReferenceObject(p) ? reference2name(p.$ref) : p.name)\n              ) {\n                parameters.push(p);\n              }\n            });\n\n            const comments = [\n              summary && {\n                comment: summary,\n              },\n              description && {\n                comment: description,\n              },\n              tags.length > 0 && {\n                tag: \"tag\",\n                comment: tags.join(\", \"),\n              },\n              deprecated && {\n                tag: \"deprecated\",\n                name: \"\",\n                comment: \"\",\n              },\n            ].filter(Boolean) as MaybeTagItem[];\n\n            const clientApiObject = {\n              comments,\n              method,\n              url: path,\n              name: pathToName(path, method, operationId),\n              metadata: {},\n            } as ClientInfo;\n\n            if (requestBody) {\n              if (isV3ReferenceObject(requestBody)) {\n                clientApiObject.body = upperCamelCase(reference2name(requestBody.$ref));\n              } else {\n                const shouldPutInFormData =\n                  \"multipart/form-data\" in requestBody.content ||\n                  \"application/x-www-form-urlencoded\" in requestBody.content;\n\n                clientApiObject.metadata.useFormData = shouldPutInFormData;\n\n                const type = Object.values(requestBody.content)[0].schema;\n\n                if (isV3ReferenceObject(type)) {\n                  clientApiObject.body = upperCamelCase(reference2name(type.$ref));\n                } else {\n                  if (type?.properties) {\n                    const required = type.required;\n                    Object.assign(\n                      type.properties,\n                      Object.keys(type.properties).reduce((acc, propName) => {\n                        const schema = type.properties![propName];\n                        return {\n                          ...acc,\n                          [propName]: {\n                            ...schema,\n                            required: shouldPutInFormData || required?.includes(propName),\n                            in: shouldPutInFormData ? \"form-data\" : \"body\",\n                          },\n                        };\n                      }, {}),\n                    );\n                  }\n\n                  clientApiObject.body = type ? this.expandSchemaObject(type, \"\") : \"\";\n                }\n              }\n            }\n\n            if (parameters.length === 0) {\n              clientApiObject.parameters = \"\";\n            } else {\n              clientApiObject.parameters = {\n                members: this.expandParameterSchema(parameters),\n              };\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const mediaType = responses[\"200\"] || responses[\"201\"];\n\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (mediaType) {\n              if (isV3ReferenceObject(mediaType)) {\n                clientApiObject.response = upperCamelCase(reference2name(mediaType.$ref));\n              } else {\n                if (mediaType.content) {\n                  const shouldParseResponseToJSON =\n                    \"application/json\" in mediaType.content || \"*/*\" in mediaType.content;\n\n                  clientApiObject.metadata.useJSONResponse = shouldParseResponseToJSON;\n\n                  const type = (\n                    \"*/*\" in mediaType.content\n                      ? mediaType.content[\"*/*\"]\n                      : \"application/json\" in mediaType.content\n                        ? mediaType.content[\"application/json\"]\n                        : Object.values(mediaType.content)[0]\n                  ).schema;\n\n                  if (type) {\n                    if (isV3ReferenceObject(type)) {\n                      clientApiObject.response = upperCamelCase(reference2name(type.$ref));\n                    } else {\n                      clientApiObject.response = this.expandSchemaObject(type, \"\");\n                    }\n                  }\n                } else {\n                  clientApiObject.response = \"\";\n                }\n              }\n            } else {\n              clientApiObject.response = \"\";\n            }\n\n            apiObjects.push(clientApiObject);\n          }\n        });\n      }\n\n      return [...acc, ...apiObjects];\n    }, []);\n  }\n\n  protected readonly doc!: OpenAPIV3.Document;\n  protected readonly output!: string;\n\n  constructor(doc: OpenAPIV3.Document, client: Client, output: string) {\n    this.doc = doc;\n    this.client = client;\n    this.output = output;\n  }\n\n  public async parse() {\n    const apis = this.analyzeApis();\n    logger.debug(apis);\n\n    const code = [\n      this.banner,\n      Object.keys(this.enums)\n        .map((enumName) => this.client.enumDeclaration(this.enums[enumName]))\n        .join(\"\\n\\n\"),\n      \"\\n\\n\",\n      Object.keys(this.schemas)\n        .map((typeName) => {\n          const schema = this.schemas[typeName];\n          const typeAlias: TypeAlias = {\n            name: upperCamelCase(typeName),\n            modifier: [\"export\"],\n            type: this.expandSchemaObject(schema, typeName),\n          };\n\n          return this.client.typeDeclaration(typeAlias, true);\n        })\n        .join(\";\\n\\n\"),\n      \"\\n\\n\",\n      this.client.templates(apis),\n    ].join(\"\\n\");\n\n    writeToFile(\"output.ts\", await formatCode(code))\n      .then(() => {\n        //\n      })\n      .catch((error: unknown) => {\n        logger.error(error);\n      });\n\n    return await formatCode(code);\n  }\n}\n","import ansiStyles from '#ansi-styles';\nimport supportsColor from '#supports-color';\nimport { // eslint-disable-line import/order\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex,\n} from './utilities.js';\n\nconst {stdout: stdoutColor, stderr: stderrColor} = supportsColor;\n\nconst GENERATOR = Symbol('GENERATOR');\nconst STYLER = Symbol('STYLER');\nconst IS_EMPTY = Symbol('IS_EMPTY');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m',\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nexport class Chalk {\n\tconstructor(options) {\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = (...strings) => strings.join(' ');\n\tapplyOptions(chalk, options);\n\n\tObject.setPrototypeOf(chalk, createChalk.prototype);\n\n\treturn chalk;\n};\n\nfunction createChalk(options) {\n\treturn chalkFactory(options);\n}\n\nObject.setPrototypeOf(createChalk.prototype, Function.prototype);\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t},\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this[STYLER], true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t},\n};\n\nconst getModelAnsi = (model, level, type, ...arguments_) => {\n\tif (model === 'rgb') {\n\t\tif (level === 'ansi16m') {\n\t\t\treturn ansiStyles[type].ansi16m(...arguments_);\n\t\t}\n\n\t\tif (level === 'ansi256') {\n\t\t\treturn ansiStyles[type].ansi256(ansiStyles.rgbToAnsi256(...arguments_));\n\t\t}\n\n\t\treturn ansiStyles[type].ansi(ansiStyles.rgbToAnsi(...arguments_));\n\t}\n\n\tif (model === 'hex') {\n\t\treturn getModelAnsi('rgb', level, type, ...ansiStyles.hexToRgb(...arguments_));\n\t}\n\n\treturn ansiStyles[type][model](...arguments_);\n};\n\nconst usedModels = ['rgb', 'hex', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'color', ...arguments_), ansiStyles.color.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'bgColor', ...arguments_), ansiStyles.bgColor.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this[GENERATOR].level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis[GENERATOR].level = level;\n\t\t},\n\t},\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent,\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\t// Single argument is hot path, implicit coercion is faster than anything\n\t// eslint-disable-next-line no-implicit-coercion\n\tconst builder = (...arguments_) => applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\n\t// We alter the prototype because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tObject.setPrototypeOf(builder, proto);\n\n\tbuilder[GENERATOR] = self;\n\tbuilder[STYLER] = _styler;\n\tbuilder[IS_EMPTY] = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self[IS_EMPTY] ? '' : string;\n\t}\n\n\tlet styler = self[STYLER];\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.includes('\\u001B')) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nObject.defineProperties(createChalk.prototype, styles);\n\nconst chalk = createChalk();\nexport const chalkStderr = createChalk({level: stderrColor ? stderrColor.level : 0});\n\nexport {\n\tmodifierNames,\n\tforegroundColorNames,\n\tbackgroundColorNames,\n\tcolorNames,\n\n\t// TODO: Remove these aliases in the next major version\n\tmodifierNames as modifiers,\n\tforegroundColorNames as foregroundColors,\n\tbackgroundColorNames as backgroundColors,\n\tcolorNames as colors,\n} from './vendor/ansi-styles/index.js';\n\nexport {\n\tstdoutColor as supportsColor,\n\tstderrColor as supportsColorStderr,\n};\n\nexport default chalk;\n","const ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi16 = (offset = 0) => code => `\\u001B[${code + offset}m`;\n\nconst wrapAnsi256 = (offset = 0) => code => `\\u001B[${38 + offset};5;${code}m`;\n\nconst wrapAnsi16m = (offset = 0) => (red, green, blue) => `\\u001B[${38 + offset};2;${red};${green};${blue}m`;\n\nconst styles = {\n\tmodifier: {\n\t\treset: [0, 0],\n\t\t// 21 isn't widely supported and 22 does the same thing\n\t\tbold: [1, 22],\n\t\tdim: [2, 22],\n\t\titalic: [3, 23],\n\t\tunderline: [4, 24],\n\t\toverline: [53, 55],\n\t\tinverse: [7, 27],\n\t\thidden: [8, 28],\n\t\tstrikethrough: [9, 29],\n\t},\n\tcolor: {\n\t\tblack: [30, 39],\n\t\tred: [31, 39],\n\t\tgreen: [32, 39],\n\t\tyellow: [33, 39],\n\t\tblue: [34, 39],\n\t\tmagenta: [35, 39],\n\t\tcyan: [36, 39],\n\t\twhite: [37, 39],\n\n\t\t// Bright color\n\t\tblackBright: [90, 39],\n\t\tgray: [90, 39], // Alias of `blackBright`\n\t\tgrey: [90, 39], // Alias of `blackBright`\n\t\tredBright: [91, 39],\n\t\tgreenBright: [92, 39],\n\t\tyellowBright: [93, 39],\n\t\tblueBright: [94, 39],\n\t\tmagentaBright: [95, 39],\n\t\tcyanBright: [96, 39],\n\t\twhiteBright: [97, 39],\n\t},\n\tbgColor: {\n\t\tbgBlack: [40, 49],\n\t\tbgRed: [41, 49],\n\t\tbgGreen: [42, 49],\n\t\tbgYellow: [43, 49],\n\t\tbgBlue: [44, 49],\n\t\tbgMagenta: [45, 49],\n\t\tbgCyan: [46, 49],\n\t\tbgWhite: [47, 49],\n\n\t\t// Bright color\n\t\tbgBlackBright: [100, 49],\n\t\tbgGray: [100, 49], // Alias of `bgBlackBright`\n\t\tbgGrey: [100, 49], // Alias of `bgBlackBright`\n\t\tbgRedBright: [101, 49],\n\t\tbgGreenBright: [102, 49],\n\t\tbgYellowBright: [103, 49],\n\t\tbgBlueBright: [104, 49],\n\t\tbgMagentaBright: [105, 49],\n\t\tbgCyanBright: [106, 49],\n\t\tbgWhiteBright: [107, 49],\n\t},\n};\n\nexport const modifierNames = Object.keys(styles.modifier);\nexport const foregroundColorNames = Object.keys(styles.color);\nexport const backgroundColorNames = Object.keys(styles.bgColor);\nexport const colorNames = [...foregroundColorNames, ...backgroundColorNames];\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`,\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false,\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false,\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = wrapAnsi16();\n\tstyles.color.ansi256 = wrapAnsi256();\n\tstyles.color.ansi16m = wrapAnsi16m();\n\tstyles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n\n\t// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\tObject.defineProperties(styles, {\n\t\trgbToAnsi256: {\n\t\t\tvalue(red, green, blue) {\n\t\t\t\t// We use the extended greyscale palette here, with the exception of\n\t\t\t\t// black and white. normal palette only has 4 greyscale shades.\n\t\t\t\tif (red === green && green === blue) {\n\t\t\t\t\tif (red < 8) {\n\t\t\t\t\t\treturn 16;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (red > 248) {\n\t\t\t\t\t\treturn 231;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Math.round(((red - 8) / 247) * 24) + 232;\n\t\t\t\t}\n\n\t\t\t\treturn 16\n\t\t\t\t\t+ (36 * Math.round(red / 255 * 5))\n\t\t\t\t\t+ (6 * Math.round(green / 255 * 5))\n\t\t\t\t\t+ Math.round(blue / 255 * 5);\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToRgb: {\n\t\t\tvalue(hex) {\n\t\t\t\tconst matches = /[a-f\\d]{6}|[a-f\\d]{3}/i.exec(hex.toString(16));\n\t\t\t\tif (!matches) {\n\t\t\t\t\treturn [0, 0, 0];\n\t\t\t\t}\n\n\t\t\t\tlet [colorString] = matches;\n\n\t\t\t\tif (colorString.length === 3) {\n\t\t\t\t\tcolorString = [...colorString].map(character => character + character).join('');\n\t\t\t\t}\n\n\t\t\t\tconst integer = Number.parseInt(colorString, 16);\n\n\t\t\t\treturn [\n\t\t\t\t\t/* eslint-disable no-bitwise */\n\t\t\t\t\t(integer >> 16) & 0xFF,\n\t\t\t\t\t(integer >> 8) & 0xFF,\n\t\t\t\t\tinteger & 0xFF,\n\t\t\t\t\t/* eslint-enable no-bitwise */\n\t\t\t\t];\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi256: {\n\t\t\tvalue: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t\tansi256ToAnsi: {\n\t\t\tvalue(code) {\n\t\t\t\tif (code < 8) {\n\t\t\t\t\treturn 30 + code;\n\t\t\t\t}\n\n\t\t\t\tif (code < 16) {\n\t\t\t\t\treturn 90 + (code - 8);\n\t\t\t\t}\n\n\t\t\t\tlet red;\n\t\t\t\tlet green;\n\t\t\t\tlet blue;\n\n\t\t\t\tif (code >= 232) {\n\t\t\t\t\tred = (((code - 232) * 10) + 8) / 255;\n\t\t\t\t\tgreen = red;\n\t\t\t\t\tblue = red;\n\t\t\t\t} else {\n\t\t\t\t\tcode -= 16;\n\n\t\t\t\t\tconst remainder = code % 36;\n\n\t\t\t\t\tred = Math.floor(code / 36) / 5;\n\t\t\t\t\tgreen = Math.floor(remainder / 6) / 5;\n\t\t\t\t\tblue = (remainder % 6) / 5;\n\t\t\t\t}\n\n\t\t\t\tconst value = Math.max(red, green, blue) * 2;\n\n\t\t\t\tif (value === 0) {\n\t\t\t\t\treturn 30;\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tlet result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));\n\n\t\t\t\tif (value === 2) {\n\t\t\t\t\tresult += 60;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\trgbToAnsi: {\n\t\t\tvalue: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi: {\n\t\t\tvalue: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t});\n\n\treturn styles;\n}\n\nconst ansiStyles = assembleStyles();\n\nexport default ansiStyles;\n","import process from 'node:process';\nimport os from 'node:os';\nimport tty from 'node:tty';\n\n// From: https://github.com/sindresorhus/has-flag/blob/main/index.js\n/// function hasFlag(flag, argv = globalThis.Deno?.args ?? process.argv) {\nfunction hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : process.argv) {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n}\n\nconst {env} = process;\n\nlet flagForceColor;\nif (\n\thasFlag('no-color')\n\t|| hasFlag('no-colors')\n\t|| hasFlag('color=false')\n\t|| hasFlag('color=never')\n) {\n\tflagForceColor = 0;\n} else if (\n\thasFlag('color')\n\t|| hasFlag('colors')\n\t|| hasFlag('color=true')\n\t|| hasFlag('color=always')\n) {\n\tflagForceColor = 1;\n}\n\nfunction envForceColor() {\n\tif ('FORCE_COLOR' in env) {\n\t\tif (env.FORCE_COLOR === 'true') {\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (env.FORCE_COLOR === 'false') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3,\n\t};\n}\n\nfunction _supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {\n\tconst noFlagForceColor = envForceColor();\n\tif (noFlagForceColor !== undefined) {\n\t\tflagForceColor = noFlagForceColor;\n\t}\n\n\tconst forceColor = sniffFlags ? flagForceColor : noFlagForceColor;\n\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (sniffFlags) {\n\t\tif (hasFlag('color=16m')\n\t\t\t|| hasFlag('color=full')\n\t\t\t|| hasFlag('color=truecolor')) {\n\t\t\treturn 3;\n\t\t}\n\n\t\tif (hasFlag('color=256')) {\n\t\t\treturn 2;\n\t\t}\n\t}\n\n\t// Check for Azure DevOps pipelines.\n\t// Has to be above the `!streamIsTTY` check.\n\tif ('TF_BUILD' in env && 'AGENT_NAME' in env) {\n\t\treturn 1;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10\n\t\t\t&& Number(osRelease[2]) >= 10_586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14_931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['GITHUB_ACTIONS', 'GITEA_ACTIONS', 'CIRCLECI'].some(key => key in env)) {\n\t\t\treturn 3;\n\t\t}\n\n\t\tif (['TRAVIS', 'APPVEYOR', 'GITLAB_CI', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif (env.TERM === 'xterm-kitty') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app': {\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\t}\n\n\t\t\tcase 'Apple_Terminal': {\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nexport function createSupportsColor(stream, options = {}) {\n\tconst level = _supportsColor(stream, {\n\t\tstreamIsTTY: stream && stream.isTTY,\n\t\t...options,\n\t});\n\n\treturn translateLevel(level);\n}\n\nconst supportsColor = {\n\tstdout: createSupportsColor({isTTY: tty.isatty(1)}),\n\tstderr: createSupportsColor({isTTY: tty.isatty(2)}),\n};\n\nexport default supportsColor;\n","// TODO: When targeting Node.js 16, use `String.prototype.replaceAll`.\nexport function stringReplaceAll(string, substring, replacer) {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.slice(endIndex, index) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n\nexport function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.slice(endIndex, (gotCR ? index - 1 : index)) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { OpenAPIV2, OpenAPIV3, OpenAPIV3_1 } from \"openapi-types\";\n\nexport enum OpenApiVersion {\n  \"v2\",\n  \"v3\",\n  \"v3_1\",\n}\nexport const isV2ReferenceObject = (schema: any): schema is OpenAPIV2.ReferenceObject => !!schema?.$ref;\n\nexport const isV3ReferenceObject = (schema: any): schema is OpenAPIV3.ReferenceObject => !!schema?.$ref;\n\nexport const isV3_1ReferenceObject = (schema: any): schema is OpenAPIV3_1.ReferenceObject => !!schema?.$ref;\n\nexport const isV3ArrySchemaObject = (schema: any): schema is OpenAPIV3.ArraySchemaObject =>\n  !!schema?.items || schema.type === \"array\";\n","export const unionType = Symbol(\"union\");\n\nexport const intersectionType = Symbol(\"intersection\");\n\nexport type TypeParameter = {\n  name: string;\n};\n\nexport const isTypeParameter = (t: unknown): t is TypeParameter => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n    return !!((t as any).name && Object.keys(t as any).length === 1);\n  } catch {\n    return false;\n  }\n};\n\nexport type TypeKeyword = TypeParameter;\n\nexport type PropertySignature = {\n  name: string;\n  required?: boolean;\n  deprecated?: boolean;\n  description?: string;\n  in?: string;\n  type: ArrayType[\"elementType\"];\n  format?: string;\n  dotdotdot?: boolean;\n  initializer?: string | TypeLiteral;\n};\n\nexport const isPropertySignature = (t: unknown): t is PropertySignature => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n    return !!((t as any).name && (t as any).type && Object.keys(t as any).length === 2);\n  } catch {\n    return false;\n  }\n};\n\nexport type TypeLiteral = {\n  members: PropertySignature[];\n};\n\nexport const isTypeLiteral = (t: unknown): t is TypeLiteral => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n    return !!((t as any).members && Object.keys(t as any).length === 1);\n  } catch {\n    return false;\n  }\n};\n\nexport type IntersectionType = {\n  name: symbol;\n  types: (string | TypeParameter | TypeLiteral | TypeReference)[];\n};\n\nexport const isIntersectionType = (t: unknown): t is IntersectionType => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n    return !!((t as any).name && (t as any).name === intersectionType && Object.keys(t as any).length === 2);\n  } catch {\n    return false;\n  }\n};\n\nexport type UnionType = {\n  name: symbol;\n  types: ArrayType[\"elementType\"][];\n};\n\nexport const isUnionType = (t: unknown): t is UnionType => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n    return !!((t as any).name && (t as any).name === unionType && Object.keys(t as any).length === 2);\n  } catch {\n    return false;\n  }\n};\n\nexport type TypeReference = {\n  typeName: string;\n  typeArguments?: ArrayType[\"elementType\"][];\n};\n\nexport const isTypeReference = (t: unknown): t is TypeReference => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    return !!(t as any).typeName;\n  } catch {\n    return false;\n  }\n};\n\nexport type ArrayType = {\n  elementType: string | TypeParameter | TypeLiteral | TypeReference | IntersectionType | UnionType | ArrayType;\n};\n\nexport const isArrayType = (t: unknown): t is ArrayType => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return !!(\"elementType\" in (t as any));\n  } catch {\n    return false;\n  }\n};\n\nexport type TypeAlias = {\n  name: string;\n  modifier?: string[];\n  typeParameters?: ArrayType[\"elementType\"][];\n  type?: ArrayType[\"elementType\"];\n};\n\nexport type Enum = {\n  name: string;\n  modifier?: string[];\n  members: (Omit<PropertySignature, \"require\" | \"deprecated\"> & { type?: string })[];\n};\n","const formatMapping = {\n  int32: \"number\",\n  int64: \"number\",\n  float: \"number\",\n  double: \"number\",\n  integer: \"number\",\n  password: \"string\",\n  string: \"string\",\n  date: \"string\",\n  \"date-time\": \"string\",\n  byte: \"string\",\n  binary: \"File\",\n  boolean: \"boolean\",\n  null: \"null\",\n  file: \"File\",\n  uri: \"string\",\n  uuid: \"string\",\n  json: \"string\",\n};\n\nexport default function format2type(type: keyof typeof formatMapping) {\n  return formatMapping[type];\n}\n","import * as prettier from \"prettier\";\n\ninterface FormatOptions {\n  parser?: prettier.BuiltInParserName;\n  semi?: boolean;\n  tabWidth?: number;\n  printWidth?: number;\n}\n\nexport async function formatCode(code: string, options: FormatOptions = {}): Promise<string> {\n  try {\n    const defaultOptions: prettier.Options = {\n      parser: \"typescript\",\n      semi: true,\n      tabWidth: 2,\n      printWidth: 80,\n      ...options,\n    };\n\n    const formattedCode = await prettier.format(code, defaultOptions);\n    return formattedCode;\n  } catch (error) {\n    console.error(\"Error formatting code:\", error);\n    return code; // Return original code if formatting fails\n  }\n}\n\n// Usage example:\n// const code = `function hello(){return\"world\"}`;\n// const formatted = await formatCode(code, { parser: 'typescript' });\n","/**\n * Compares two arrays to determine if they contain the same enum values\n *\n * @param a - First array of enum values to compare\n * @param b - Second array of enum values to compare\n * @returns boolean - True if arrays contain same values, false otherwise\n *\n * @example\n * isSameEnum(['A', 'B'], ['B', 'A']) // returns true\n * isSameEnum([1, 2], [1, 3]) // returns false\n *\n * @note Arrays are sorted before comparison to handle different ordering\n */\nexport default function isSameEnum(a: unknown[], b: unknown[]) {\n  // Check if arrays have different lengths\n  if (a.length !== b.length) return false;\n\n  // Sort and compare each element\n  return a.sort().every((v, index) => v === b.sort()[index]);\n}\n","const typescriptKeywords = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"class\",\n  \"const\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"delete\",\n  \"do\",\n  \"else\",\n  \"enum\",\n  \"export\",\n  \"extends\",\n  \"false\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"import\",\n  \"in\",\n  \"instanceof\",\n  \"new\",\n  \"null\",\n  \"return\",\n  \"super\",\n  \"switch\",\n  \"this\",\n  \"throw\",\n  \"true\",\n  \"try\",\n  \"typeof\",\n  \"var\",\n  \"void\",\n  \"while\",\n  \"with\",\n  \"as\",\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  \"abstract\",\n  \"any\",\n  \"async\",\n  \"await\",\n  \"constructor\",\n  \"declare\",\n  \"from\",\n  \"get\",\n  \"is\",\n  \"module\",\n  \"namespace\",\n  \"never\",\n  \"require\",\n  \"set\",\n  \"type\",\n  \"unknown\",\n  \"readonly\",\n  \"of\",\n  \"asserts\",\n  \"infer\",\n  \"keyof\",\n  \"boolean\",\n  \"number\",\n  \"string\",\n  \"symbol\",\n  // \"object\",\n  \"undefined\",\n  \"bigint\",\n]);\n\nexport default function normalizeName(name: string) {\n  if (typescriptKeywords.has(name)) {\n    name += \"Object\";\n  }\n  return name.replace(/[/\\-_{}():\\s`,*<>$]/g, \"_\").replaceAll(\"...\", \"\");\n}\n","import normalizeName from \"@/utils/normalizeName\";\n\nexport const capitalize = (text: string) => {\n  text = normalizeName(text).trim();\n  return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n};\n\nexport const camelCase = (text: string): string => {\n  return normalizeName(text)\n    .split(\"_\")\n    .filter(Boolean)\n    .map((text, index) => (index === 0 ? text : capitalize(text)))\n    .join(\"\");\n};\n\nexport const upperCamelCase = (text: string) => {\n  return normalizeName(text).replaceAll(\"...\", \"\").split(\"_\").filter(Boolean).map(capitalize).join(\"\");\n};\n\nexport default function pathToName(path: string, method?: string, operationId?: string) {\n  const name = camelCase(path);\n  const suffix = method ? capitalize(upperCamelCase(`using_${method}`)) : \"\";\n  return (operationId ? camelCase(normalizeName(operationId)) : name) + suffix;\n}\n","export default function reference2name(ref: string) {\n  return ref.split(\"/\").pop()!;\n}\n","import nodefs from \"node:fs/promises\";\n\n// Wrtie to file\nexport async function writeToFile(filePath: string, data: string) {\n  try {\n    await nodefs.writeFile(filePath, data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n","/* eslint-disable unicorn/filename-case */\n/**\n * OpenAPI v3 Schema Parser and Code Generator\n * Converts OpenAPI v3 specifications to TypeScript code\n */\n\nimport { createScopedLogger } from \"@moccona/logger\";\nimport { OpenAPIV3, type OpenAPIV3_1 } from \"openapi-types\";\n\nimport Adaptor from \"@/providers/Adaptor\";\nimport Client from \"@/providers/Client\";\nimport { ClientInfo } from \"@/types/client\";\nimport { isV3_1ReferenceObject, isV3ArrySchemaObject, isV3ReferenceObject } from \"@/types/openapi\";\nimport type { MaybeTagItem } from \"@/types/tag\";\nimport {\n  ArrayType,\n  Enum,\n  IntersectionType,\n  intersectionType,\n  PropertySignature,\n  TypeAlias,\n  UnionType,\n  unionType,\n} from \"@/types/type\";\n// Utilities\nimport format2type from \"@/utils/format2type\";\nimport { formatCode } from \"@/utils/formatCode\";\nimport isSameEnum from \"@/utils/isSameEnum\";\nimport normalizeName from \"@/utils/normalizeName\";\nimport pathToName, { capitalize, upperCamelCase } from \"@/utils/pathToName\";\nimport reference2name from \"@/utils/reference2name\";\nimport { writeToFile } from \"@/utils/writetoFile\";\n\nconst logger = createScopedLogger(\"OpenAPIV3\");\n\n/**\n * OpenApiV3 Class\n * Implements the Adaptor interface for OpenAPI v3 schema parsing\n */\nexport default class OpenApiV3_1 implements Adaptor {\n  /** Store for enum definitions generated during parsing */\n  protected enums: Record<string, Enum> = {};\n\n  /** Client instance for code generation */\n  private client: Client;\n\n  /**\n   * Returns the banner comment for generated code\n   * Including version, title and description from OpenAPI doc\n   */\n  public get banner() {\n    const { info } = this.doc;\n    const { version, title, description } = info;\n\n    return this.client.comment([\n      {\n        comment: version,\n      },\n      { comment: title },\n      { comment: description ?? \"\" },\n    ]);\n  }\n\n  public get schemas() {\n    const { components } = this.doc;\n    if (components) {\n      const { schemas = {}, requestBodies = {}, responses = {} } = components;\n\n      const schemas_ = schemas;\n\n      return {\n        ...schemas,\n        ...this.analyzeMediaSchemas(schemas_, requestBodies),\n        ...this.analyzeMediaSchemas(schemas_, responses),\n      } as Record<string, OpenAPIV3_1.SchemaObject>;\n    }\n\n    return {};\n  }\n\n  public get parameters() {\n    const { components } = this.doc;\n    if (components) {\n      const { parameters = {}, headers = {} } = components;\n\n      return {\n        ...(headers as Record<string, OpenAPIV3_1.ParameterObject>),\n        ...(parameters as Record<string, OpenAPIV3_1.ParameterObject>),\n      };\n    }\n\n    return {};\n  }\n\n  protected analyzeMediaSchemas(\n    schemas: Record<string, OpenAPIV3_1.SchemaObject>,\n    mediaSchemas: Record<\n      string,\n      OpenAPIV3_1.RequestBodyObject | OpenAPIV3_1.ResponseObject | OpenAPIV3_1.ReferenceObject\n    >,\n  ) {\n    const resolveReference = (ref: string) => schemas[reference2name(ref)];\n\n    const otherSchemasWithNoReference = {};\n\n    return Object.entries(mediaSchemas).reduce<Record<string, OpenAPIV3_1.SchemaObject>>((acc, [key, schema]) => {\n      key = upperCamelCase(normalizeName(key));\n\n      if (isV3ReferenceObject(schema)) {\n        return Object.assign(acc, {\n          [key]: resolveReference(schema.$ref),\n        });\n      }\n\n      const { content } = schema;\n\n      if (!content) {\n        return acc;\n      }\n\n      const mediaTypeSchema = (\n        \"application/json\" in content\n          ? content[\"application/json\"]\n          : \"*/*\" in content\n            ? content[\"*/*\"]\n            : Object.values(content)[0]\n      ).schema;\n\n      if (!mediaTypeSchema) {\n        return acc;\n      }\n\n      if ((mediaTypeSchema as OpenAPIV3_1.ReferenceObject).$ref) {\n        return Object.assign(acc, {\n          [key]: resolveReference((mediaTypeSchema as OpenAPIV3_1.ReferenceObject).$ref),\n        });\n      }\n\n      return Object.assign(acc, {\n        [key]: mediaTypeSchema as OpenAPIV3_1.SchemaObject,\n      });\n    }, otherSchemasWithNoReference);\n  }\n\n  protected expandSchemaObject(\n    schema: OpenAPIV3_1.ReferenceObject | OpenAPIV3_1.SchemaObject,\n    parentName: string,\n  ): ArrayType[\"elementType\"] {\n    if (isV3ReferenceObject(schema)) return upperCamelCase(reference2name(schema.$ref));\n    if (isV3ArrySchemaObject(schema)) {\n      const { items } = schema;\n      if (isV3ReferenceObject(items)) {\n        return {\n          elementType: upperCamelCase(reference2name(items.$ref)),\n        } as ArrayType;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const isEmptyItems = items == undefined || Object.keys(items).length === 0;\n\n      return {\n        elementType: isEmptyItems ? \"unknown\" : this.expandSchemaObject(items, \"\"),\n      } as ArrayType;\n    } else {\n      const { type, format, allOf, oneOf, anyOf, enum: enums_, required, additionalProperties } = schema;\n      const { properties } = schema;\n\n      if (oneOf || anyOf) {\n        return {\n          name: unionType,\n          types: (oneOf ?? anyOf ?? allOf)!.map((s) => this.expandSchemaObject(s, \"\")),\n        } as UnionType;\n      }\n\n      if (allOf) {\n        return {\n          name: intersectionType,\n          types: allOf.map((schema) =>\n            isV3ReferenceObject(schema)\n              ? upperCamelCase(reference2name(schema.$ref))\n              : this.expandSchemaObject(schema, \"\"),\n          ),\n        } as IntersectionType;\n      }\n\n      if (type === \"object\" && !properties) {\n        return {\n          typeName: \"Record\",\n          typeArguments: [\"string\", \"unknown\"],\n        };\n      }\n\n      if (additionalProperties) {\n        const propertiesSchema = isV3ReferenceObject(additionalProperties)\n          ? this.schemas[reference2name(additionalProperties.$ref)]\n          : additionalProperties;\n\n        if (typeof propertiesSchema !== \"boolean\") {\n          return this.expandSchemaObject(propertiesSchema, \"\");\n        }\n      }\n\n      if (properties && Object.keys(properties).length > 0) {\n        return {\n          members: Object.keys(properties).reduce<PropertySignature[]>((acc, propKey) => {\n            const propSchema = properties[propKey];\n\n            if (isV3ReferenceObject(propSchema)) {\n              acc.push({\n                name: propKey,\n                type: upperCamelCase(reference2name(propSchema.$ref)),\n              });\n            } else {\n              if (propSchema.enum) {\n                const name = capitalize(parentName) + capitalize(propKey);\n                const preDefinedSchemaName = this.getEnum(propSchema.enum);\n                if (preDefinedSchemaName) {\n                  acc.push({\n                    name: propKey,\n                    type: name,\n                  });\n                } else {\n                  acc.push({\n                    name: propKey,\n                    type: {\n                      name: unionType,\n                      types:\n                        propSchema.type === \"number\"\n                          ? ([...new Set(propSchema.enum)] as (string | number)[])\n                          : ([...new Set(propSchema.enum)] as (string | number)[]).map((v) => `\"${v}\"`),\n                    } as UnionType,\n                  });\n                }\n              } else {\n                if ((propSchema as OpenAPIV3_1.ParameterObject).in !== \"cookie\") {\n                  acc.push({\n                    in: (propSchema as OpenAPIV3_1.ParameterObject).in,\n                    deprecated: propSchema.deprecated,\n                    name: propKey,\n                    format: propSchema.format,\n                    required:\n                      (propSchema as OpenAPIV3_1.ParameterObject).required ??\n                      (typeof required === \"boolean\" ? required : required?.includes(propKey)),\n                    type: this.expandSchemaObject(propSchema, propKey),\n                    description: propSchema.description,\n                  } as PropertySignature);\n                }\n              }\n            }\n\n            return acc;\n          }, []),\n        };\n      }\n\n      if (enums_) {\n        return {\n          name: unionType,\n          types: (enums_ as (string | number)[]).map((v) => `\"${v}\"`),\n        } as UnionType;\n      }\n\n      // @ts-expect-error format and type are good.\n      return format ? format2type(format) : format2type(type);\n    }\n  }\n\n  protected expandParameterSchema(\n    parameters: (OpenAPIV3_1.ReferenceObject | OpenAPIV3_1.ParameterObject)[],\n  ): PropertySignature[] {\n    const items: PropertySignature[] = [];\n\n    parameters.forEach((parameter) => {\n      parameter = isV3ReferenceObject(parameter) ? this.parameters[reference2name(parameter.$ref)] : parameter;\n      const { name, deprecated, schema, required, in: in_ } = parameter;\n      if (schema) {\n        items.push({\n          name,\n          in: in_,\n          required: !!required,\n          deprecated: !!deprecated,\n          type: this.expandSchemaObject(schema, name),\n        });\n      }\n    });\n\n    return items;\n  }\n\n  private getEnum(enumValue: unknown[]) {\n    const enum_ = Object.values(this.enums).find((value) =>\n      isSameEnum(\n        value.members.map((m) => m.name),\n        enumValue,\n      ),\n    );\n\n    return enum_?.name;\n  }\n\n  protected analyzeApis() {\n    const { paths } = this.doc;\n    if (!paths || Object.keys(paths).length === 0) {\n      return [];\n    }\n    const schemas = this.schemas;\n    for (const schemaKey in schemas) {\n      const schema = schemas[schemaKey];\n      if (schema.properties) {\n        for (const propKey in schema.properties) {\n          const prop = schema.properties[propKey];\n          if (!isV3ReferenceObject(prop) && prop.enum) {\n            const name = capitalize(schemaKey) + capitalize(propKey);\n            this.enums[name] = {\n              name,\n              modifier: [\"export\"],\n              members: [...new Set(prop.enum)].map((value: string) => ({ name: value, type: value })),\n            } as Enum;\n          }\n        }\n      }\n    }\n    return Object.entries(paths).reduce<ClientInfo[]>((acc, [path, schema]) => {\n      const apiObjects: ClientInfo[] = [];\n\n      if (schema) {\n        const { parameters: commonParameters = [] } = schema;\n        Object.keys(OpenAPIV3.HttpMethods).forEach((method) => {\n          //@ts-expect-error Make it all lowercase\n          const apiMethodObject = schema[(method as keyof typeof schema).toLowerCase()] as\n            | OpenAPIV3_1.OperationObject\n            | undefined;\n\n          if (apiMethodObject) {\n            const methodSchema = apiMethodObject;\n            const {\n              summary,\n              description,\n              parameters = [],\n              responses = {},\n              deprecated,\n              requestBody,\n              tags = [],\n              operationId,\n            } = methodSchema;\n\n            commonParameters.forEach((p) => {\n              if (\n                !parameters\n                  .map((s) => (isV3ReferenceObject(s) ? reference2name(s.$ref) : s.name))\n                  .includes(isV3ReferenceObject(p) ? reference2name(p.$ref) : p.name)\n              ) {\n                parameters.push(p);\n              }\n            });\n\n            const comments = [\n              summary && {\n                comment: summary,\n              },\n              description && {\n                comment: description,\n              },\n              tags.length > 0 && {\n                tag: \"tag\",\n                comment: tags.join(\", \"),\n              },\n              deprecated && {\n                tag: \"deprecated\",\n                name: \"\",\n                comment: \"\",\n              },\n            ].filter(Boolean) as MaybeTagItem[];\n\n            const clientApiObject = {\n              comments,\n              method,\n              url: path,\n              name: pathToName(path, method, operationId),\n              metadata: {},\n            } as ClientInfo;\n\n            if (requestBody) {\n              if (isV3ReferenceObject(requestBody)) {\n                clientApiObject.body = upperCamelCase(reference2name(requestBody.$ref));\n              } else {\n                const shouldPutInFormData =\n                  \"multipart/form-data\" in requestBody.content ||\n                  \"application/x-www-form-urlencoded\" in requestBody.content;\n\n                clientApiObject.metadata.useFormData = shouldPutInFormData;\n\n                const type = Object.values(requestBody.content)[0].schema;\n\n                if (isV3ReferenceObject(type)) {\n                  clientApiObject.body = upperCamelCase(reference2name(type.$ref));\n                } else {\n                  if (type?.properties) {\n                    const required = type.required;\n                    Object.assign(\n                      type.properties,\n                      Object.keys(type.properties).reduce((acc, propName) => {\n                        const schema = type.properties![propName];\n                        return {\n                          ...acc,\n                          [propName]: {\n                            ...schema,\n                            required: shouldPutInFormData || required?.includes(propName),\n                            in: shouldPutInFormData ? \"form-data\" : \"body\",\n                          },\n                        };\n                      }, {}),\n                    );\n                  }\n\n                  clientApiObject.body = type ? this.expandSchemaObject(type, \"\") : \"\";\n                }\n              }\n            }\n\n            const parameters_ = parameters.filter((p) => (isV3_1ReferenceObject(p) ? true : p.in !== \"cookie\"));\n            if (parameters_.length === 0) {\n              clientApiObject.parameters = \"\";\n            } else {\n              clientApiObject.parameters = {\n                members: this.expandParameterSchema(parameters_),\n              };\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const mediaType = responses[\"200\"] || responses[\"201\"];\n\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (mediaType) {\n              if (isV3ReferenceObject(mediaType)) {\n                clientApiObject.response = upperCamelCase(reference2name(mediaType.$ref));\n              } else {\n                if (mediaType.content) {\n                  const shouldParseResponseToJSON =\n                    \"application/json\" in mediaType.content || \"*/*\" in mediaType.content;\n\n                  clientApiObject.metadata.useJSONResponse = shouldParseResponseToJSON;\n\n                  const type = (\n                    \"*/*\" in mediaType.content\n                      ? mediaType.content[\"*/*\"]\n                      : \"application/json\" in mediaType.content\n                        ? mediaType.content[\"application/json\"]\n                        : Object.values(mediaType.content)[0]\n                  ).schema;\n\n                  if (type) {\n                    if (isV3ReferenceObject(type)) {\n                      clientApiObject.response = upperCamelCase(reference2name(type.$ref));\n                    } else {\n                      clientApiObject.response = this.expandSchemaObject(type, \"\");\n                    }\n                  }\n                } else {\n                  clientApiObject.response = \"\";\n                }\n              }\n            } else {\n              clientApiObject.response = \"\";\n            }\n\n            apiObjects.push(clientApiObject);\n          }\n        });\n      }\n\n      return [...acc, ...apiObjects];\n    }, []);\n  }\n\n  protected readonly doc!: OpenAPIV3_1.Document;\n  protected readonly output!: string;\n\n  constructor(doc: OpenAPIV3_1.Document, client: Client, output: string) {\n    this.doc = doc;\n    this.client = client;\n    this.output = output;\n  }\n\n  public async parse() {\n    const apis = this.analyzeApis();\n    logger.debug(apis);\n\n    const code = [\n      this.banner,\n      Object.keys(this.enums)\n        .map((enumName) => this.client.enumDeclaration(this.enums[enumName]))\n        .join(\"\\n\\n\"),\n      \"\\n\\n\",\n      Object.keys(this.schemas)\n        .map((typeName) => {\n          const schema = this.schemas[typeName];\n          const typeAlias: TypeAlias = {\n            name: upperCamelCase(typeName),\n            modifier: [\"export\"],\n            type: this.expandSchemaObject(schema, typeName),\n          };\n\n          return this.client.typeDeclaration(typeAlias, true);\n        })\n        .join(\";\\n\\n\"),\n      \"\\n\\n\",\n      this.client.templates(apis),\n    ].join(\"\\n\");\n\n    writeToFile(\"output.ts\", await formatCode(code))\n      .then(() => {\n        //\n      })\n      .catch((error: unknown) => {\n        logger.error(error);\n      });\n\n    return await formatCode(code);\n  }\n}\n","import Generator from \"@/generators/Generator\";\nimport Client from \"@/providers/Client\";\nimport type { ClientInfo } from \"@/types/client\";\n\nexport default class AxiosClient extends Generator implements Client {\n  fnBody(apis: ClientInfo): string {\n    throw new Error(\"Method not implemented.\");\n  }\n  code = \"\";\n  clientName = \"axios\";\n  clientInfos: ClientInfo[] = [];\n\n  templates(apis: ClientInfo[]): string {\n    return \"\";\n  }\n}\n","import ClientClass from \"@/providers/Client\";\nimport Generator from \"@/providers/Generator\";\nimport { ClientInfo } from \"@/types/client\";\nimport type { MaybeTagItem } from \"@/types/tag\";\nimport {\n  ArrayType,\n  Enum,\n  IntersectionType,\n  intersectionType,\n  isArrayType,\n  isIntersectionType,\n  isTypeLiteral,\n  isTypeParameter,\n  isTypeReference,\n  isUnionType,\n  TypeAlias,\n  TypeReference,\n  UnionType,\n  unionType,\n} from \"@/types/type\";\nimport normalizeName from \"@/utils/normalizeName\";\nimport { camelCase } from \"@/utils/pathToName\";\n\nexport default class CodeGen implements Generator {\n  public toURL(client: ClientInfo) {\n    let { url } = client;\n    const { parameters } = client;\n    const inQueryParameters = isTypeLiteral(parameters) && parameters.members.filter((m) => m.in === \"query\");\n    // TODO: parse url\n    url = url.replaceAll(\"{\", \"${\");\n    const patchURL = inQueryParameters\n      ? url +\n        (inQueryParameters.length > 0\n          ? \"?\" +\n            inQueryParameters.map((m) => `${m.name}=\\${encodeURIComponent(String(${camelCase(m.name)}))}`).join(\"&\")\n          : \"\")\n      : url;\n    return patchURL;\n  }\n\n  public toFormData(api: ClientInfo): string {\n    const { parameters, body, metadata } = api;\n    if (!metadata.useFormData) return \"\";\n    if (body && isTypeLiteral(body)) {\n      const formDataFields = body.members.filter((p) => p.in === \"form-data\");\n      if (formDataFields.length === 0) {\n        return \"\";\n      }\n\n      return [\n        \"const fd = new FormData()\",\n        ...formDataFields.map((f) => {\n          // Deal with the multi-files upload\n          if (isArrayType(f.type) && f.type.elementType === \"File\") {\n            return `\n              for (const file of ${f.name}) {\n                fd.append('${f.name}[]', file, file.name);\n              }\n            `;\n          }\n\n          return `fd.append(\"${f.name}\", ${f.format === \"binary\" || f.format === \"string\" ? f.name : `String(${camelCase(f.name)})`})`;\n        }),\n      ].join(\"\\n\");\n    }\n\n    if (parameters && isTypeLiteral(parameters)) {\n      const formDataFields = parameters.members.filter((p) => p.in === \"form-data\");\n      if (formDataFields.length === 0) {\n        return \"\";\n      }\n      return [\n        \"const fd = new FormData()\",\n        ...formDataFields.map((f) => `fd.append(\"${f.name}\", ${camelCase(f.name)})`),\n      ].join(\"\\n\");\n    }\n\n    return \"\";\n  }\n\n  public toFunction(api: ClientInfo, client: ClientClass): string {\n    const { name, parameters, body } = api;\n\n    const fnName = name;\n\n    /**\n     * @example\n     *\n     * Output example\n     * 1. { name, age }: { name: string; age: number }\n     * 2. req: { name: string; age: number }\n     * 3: blob: Blob\n     * 4: \"\"\n     *\n     * @returns\n     */\n    const args = (): string => {\n      if (!parameters && !body) return \"\";\n\n      return [\n        parameters ? `${this.toCode(parameters)}: ${this.toTypeDeclaration(parameters)}` : \"\",\n        body ? `${this.toCode(body)} : ${this.toTypeDeclaration(body)}` : \"\",\n      ]\n        .filter(Boolean)\n        .join(\",\");\n    };\n\n    const fn = () => {\n      return [`export async function ${fnName}(${args()}) {`, client.fnBody(api), `}`].join(\"\");\n    };\n\n    const code = [\n      // For debug use\n      `${fnName}.displayName = \"${fnName}\"`,\n      fn(),\n    ];\n\n    return code.join(\"\\n\");\n  }\n\n  public comment(comments: MaybeTagItem[]): string {\n    const strs = [\"/**\"];\n\n    const maxLength = comments\n      .map(({ tag, name }) => {\n        return tag && name ? `@${tag} ${name}  `.length : 0;\n      })\n      .sort((a, b) => (a > b ? -1 : 0))[0];\n\n    comments.forEach(({ tag, name, comment }) => {\n      if (!tag || !name) {\n        strs.push(` * ${comment}`);\n      } else {\n        const comment_ = `@${tag} ${name}`;\n        const extraSpace = maxLength - comment_.length;\n        strs.push(` * @${tag} ${name + Array(extraSpace).fill(\"\").join(\" \")} - ${comment}`);\n      }\n    });\n\n    strs.push(\" */\");\n\n    return strs.join(\"\\n\");\n  }\n\n  public toCode(type: ArrayType[\"elementType\"]): string {\n    if (!type) return \"\";\n    if (typeof type === \"string\") {\n      return type.toLowerCase();\n    }\n\n    if (isTypeParameter(type)) {\n      return type.name.toLowerCase();\n    }\n\n    if (isTypeReference(type)) {\n      return type.typeName.toLowerCase();\n    }\n\n    if (isUnionType(type) || isIntersectionType(type) || isArrayType(type)) {\n      return \"req\";\n    }\n\n    const { members } = type;\n\n    if (members.length === 0) {\n      return \"{}\";\n    }\n\n    return [\n      \"{\",\n      ...members\n        .map((t) => {\n          const { initializer, name } = t;\n          if (t.in === \"cookie\") return \"\";\n          const safeName = camelCase(normalizeName(name));\n          return initializer\n            ? `${name}: ${typeof initializer === \"string\" ? initializer : this.toCode(initializer)},`\n            : `${safeName},`;\n        })\n        .filter(Boolean),\n      \"}\",\n    ]\n      .filter(Boolean)\n      .join(\"\");\n  }\n\n  public toTypeDeclaration(type: ArrayType[\"elementType\"], showComments = false): string {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (type == undefined) return \"unknown\";\n    if (typeof type === \"string\" || typeof type === \"number\") {\n      return type;\n    }\n\n    if (isTypeParameter(type)) {\n      return type.name;\n    }\n\n    if (isTypeReference(type)) {\n      return this.toTypeReferenceDeclaration(type);\n    }\n\n    if (isUnionType(type)) {\n      return this.toUnionTypeDeclaration(type);\n    }\n\n    if (isIntersectionType(type)) {\n      return this.toIntersectionTypeDeclaration(type);\n    }\n\n    if (isArrayType(type)) {\n      return this.toArrayTypeDeclaration(type);\n    }\n\n    const { members } = type;\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!members || members.length === 0) {\n      return \"{}\";\n    }\n\n    return [\n      \"{\",\n      members\n        .map((t) => {\n          if (t.in === \"cookie\") return \"\";\n          return [\n            showComments && t.description ? `/** @description ${t.description} */\\n` : \"\",\n            `\"${camelCase(normalizeName(t.name))}\"`,\n            t.required === true || t.in === \"header\" ? \"\" : \"?\",\n            \":\",\n            this.toTypeDeclaration(t.type),\n            \";\\n\",\n          ]\n            .filter(Boolean)\n            .join(\"\");\n        })\n        .join(\"\"),\n      \"}\",\n    ]\n      .filter(Boolean)\n      .join(\"\");\n  }\n\n  public toTypeReferenceDeclaration(typeReference: TypeReference) {\n    const { typeName, typeArguments } = typeReference;\n\n    if (!typeArguments) {\n      return typeName;\n    }\n\n    return `${typeName}<${typeArguments.map((t) => this.toTypeDeclaration(t)).join(\" ,\")}>`;\n  }\n\n  public toUnionTypeDeclaration(type: UnionType) {\n    const { types, name } = type;\n    if (name !== unionType) {\n      return \"\";\n    }\n\n    return types.map((t) => this.toTypeDeclaration(t)).join(\"|\");\n  }\n\n  public toIntersectionTypeDeclaration(type: IntersectionType) {\n    const { types, name } = type;\n    if (name !== intersectionType) {\n      return \"\";\n    }\n\n    return types.map((t) => this.toTypeDeclaration(t)).join(\"&\");\n  }\n\n  public toArrayTypeDeclaration(type: ArrayType) {\n    const { elementType } = type;\n    return `(${this.toTypeDeclaration(elementType)})[]`;\n  }\n\n  public toEnumDeclaration(type: Enum) {\n    const { members } = type;\n    return [\n      \"{\",\n      members.map((t) => {\n        if (!t.type) {\n          return t.name === \"\" ? `\"\" = \"\"` : t.name;\n        } else {\n          return `${normalizeName(t.name)} = \"${t.type}\"`;\n        }\n      }),\n      \"}\",\n    ].join(\"\\n\");\n  }\n\n  public typeDeclaration(typeAlias: TypeAlias, showComments = false): string {\n    const { name, modifier = [], type } = typeAlias;\n    return `${modifier.join(\" \")} type ${name} = ${this.toTypeDeclaration(type!, showComments)}`;\n  }\n\n  public interfaceDeclaration(typeAlias: TypeAlias): string {\n    const { name, modifier = [], type } = typeAlias;\n    return `${modifier.join(\" \")} interface ${name} ${this.toTypeDeclaration(type!)}`;\n  }\n\n  public enumDeclaration(enumAlias: Enum): string {\n    const { name, modifier = [] } = enumAlias;\n    return `${modifier.join(\" \")} enum ${name} ${this.toEnumDeclaration(enumAlias)}`;\n  }\n}\n","import Generator from \"@/generators/Generator\";\nimport Client from \"@/providers/Client\";\nimport type { ClientInfo } from \"@/types/client\";\nimport { isTypeLiteral, PropertySignature, TypeLiteral } from \"@/types/type\";\nimport normalizeName from \"@/utils/normalizeName\";\nimport { camelCase } from \"@/utils/pathToName\";\nexport default class FetchClient extends Generator implements Client {\n  code = \"\";\n  clientName = \"fetch\";\n  clientInfos: ClientInfo[] = [];\n\n  fnBody(api: ClientInfo): string {\n    const { parameters, method, body, metadata, response } = api;\n\n    const args = () => {\n      if (!parameters && !body) return \"\";\n      const objectLiterals = {\n        members: [\n          {\n            name: \"method\",\n            initializer: `\"${method.toUpperCase()}\"`,\n          },\n        ],\n      } as TypeLiteral;\n\n      if (body) {\n        objectLiterals.members.push({\n          name: \"body\",\n          initializer: metadata.useFormData\n            ? isTypeLiteral(body)\n              ? \"fd\"\n              : this.toCode(body)\n            : `JSON.stringify(${this.toCode(body)})`,\n        } as PropertySignature);\n      }\n\n      if (isTypeLiteral(parameters)) {\n        const headers = parameters.members.filter((p) => p.in === \"header\");\n        const bodies = parameters.members.filter((p) => p.in === \"body\" || !p.in);\n        if (headers.length > 0) {\n          objectLiterals.members.push({\n            name: \"headers\",\n            initializer: {\n              members: headers.map(\n                (h) =>\n                  ({\n                    name: h.name,\n                    initializer:\n                      h.format !== \"string\"\n                        ? `encodeURIComponent(JSON.stringify(${camelCase(normalizeName(h.name))}))`\n                        : `encodeURIComponent(${camelCase(normalizeName(h.name))})`,\n                  }) as PropertySignature,\n              ),\n            },\n          } as PropertySignature);\n        }\n\n        if (!body && bodies.length > 0) {\n          objectLiterals.members.push({\n            name: \"body\",\n            initializer: metadata.useFormData\n              ? \"fd\"\n              : `JSON.stringify(${this.toCode({\n                  members: bodies.map(\n                    (b) =>\n                      ({\n                        name: b.name,\n                      }) as PropertySignature,\n                  ),\n                })})`,\n          } as PropertySignature);\n        }\n      }\n\n      return this.toCode(objectLiterals);\n    };\n\n    const code = [\n      this.toFormData(api), //\n      \"\\n\",\n      \"return\",\n      `${this.clientName}(`,\n      `\\`${this.toURL(api)}\\`,`,\n      args(),\n      \")\",\n      metadata.useJSONResponse && response\n        ? `.then(async (resp) => await resp.json() as ${this.toTypeDeclaration(response)})`\n        : \"\",\n    ];\n    return code.join(\" \");\n  }\n\n  template(api: ClientInfo): string {\n    return this.toFunction(api, this);\n  }\n\n  templates(apis: ClientInfo[]): string {\n    const code = apis.map((api) => this.template(api)).join(\"\\n\\n\");\n    return code;\n  }\n}\n","import type { MaybeTagItem } from \"@/types/tag\";\nimport type { ArrayType } from \"@/types/type\";\n\nexport enum ClientTypes {\n  Axios,\n  Fetch,\n}\n\nexport interface ClientInfo {\n  name: string;\n  url: string;\n  method: string;\n  comments: MaybeTagItem[];\n  parameters?: ArrayType[\"elementType\"];\n  response?: ArrayType[\"elementType\"];\n  body?: ArrayType[\"elementType\"];\n  headers?: ArrayType[\"elementType\"];\n  timeout?: number;\n  metadata: {\n    useFormData?: boolean;\n    useJSONResponse?: boolean;\n  };\n}\n\nexport abstract class Client {\n  abstract code: string;\n  abstract clientName: string;\n  abstract clientInfos: ClientInfo[];\n}\n","import { OpenApiVersion } from \"@/types/openapi\";\nimport { OpenAPI, OpenAPIV2, OpenAPIV3 } from \"openapi-types\";\nimport { Agent, setGlobalDispatcher } from \"undici\";\n\nconst agent = new Agent({\n  connect: {\n    rejectUnauthorized: false,\n  },\n});\n\nsetGlobalDispatcher(agent);\n\nexport function getOpenApiDocVersion(doc: OpenAPI.Document): OpenApiVersion {\n  const version = ((doc as OpenAPIV3.Document).openapi || (doc as OpenAPIV2.Document).swagger).slice(0, 3);\n\n  switch (version) {\n    case \"2.0\":\n      return OpenApiVersion.v2;\n    case \"3.0\":\n      return OpenApiVersion.v3;\n    case \"3.1\":\n      return OpenApiVersion.v3_1;\n    default:\n      console.error(`Unknown openai version ${version}`);\n      process.exit(1);\n  }\n}\n\nexport default async function getApiDoc(docURL: string): Promise<OpenAPI.Document> {\n  console.info(`Get API Document from ${docURL}`);\n  return fetch(docURL, { method: \"GET\" }).then(async (resp) => {\n    return (await resp.json()) as OpenAPI.Document;\n  });\n}\n"]}